---
title: "Visualização de dados em R"
subtitle: "<br>NT265/NE441 - Análise de dados e apresentação de gráficos usando a linguagem R"
author: "[Maurício Vancine](https://mauriciovancine.github.io)"
date: "11/12/2025"
date-format: long
format: 
  revealjs:
    theme: [custom.scss]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
    chalkboard: true
    logo: "https://www.r-project.org/logo/Rlogo.svg"
    execute:
      echo: true
      eval: false
      warning: false
      message: false
editor: source
lang: pt
---

# Visualização de dados

# 

<center><img src="img/plot_saurus.png" style="width:90%"/></center>

::: footer
[Matejka & Fitzmaurice (2017)](https://www.autodeskresearch.com/publications/samestats)
:::

## Conteúdo

### Visualização de dados

::::::: columns
:::: {.column width="50%"}
::: nonincremental
- Contextualização
- Principais pacotes
- Gramática dos gráficos
- Paleta de cores
- Principais tipos de gráficos
- Histograma e Densidade
- Gráfico de setores
- Gráfico de barras
:::
::::

:::: {.column width="50%"}
::: nonincremental
- Gráfico de caixas
- Gráfico de dispersão
- Gráfico pareado
- Combinando gráficos
- Gráficos animados
- Gráficos interativos
- Gráficos usando interface
:::
::::
:::::::


## Script

Abram o script

<br><br><br><br>

`script_r.R`

::: footer
[workshop-r-data-manipulation - scripts](https://github.com/workshop-r-data-manipulation/01_scripts/script_r.R)
:::

# Contextualização

## Contextualização

::: incremental
* **Melhor forma** de apresentar, sintetizar, discutir e interpretar seus **dados**

* **Necessário** em quase todas as **análises estatísticas**

* **Necessário** em quase todas as publicações, trabalhos de consultoria, TCC, dissertação, tese, etc.

* Existem **vários tipos de gráficos** para representar os padrões em seus dados para diferentes tipos de finalidades

* De forma simplificada, os gráficos são **representações** dos nossos **dados tabulares**

:::

## Como mentir com estatística?

![](img/cover_mentir_estatistica.jpg){.absolute width="270" height="400" right="800" top="200"} ![](img/como_mentir_est.png){.absolute width="850" height="450" right="-100" top="150"}

::: footer
[Heff (2016)](https://www.intrinseca.com.br/livro/624/), [Como MENTIR com ESTATÍSTICA](https://youtu.be/r6d-RBDlc5I)
:::

# Principais pacotes

## Principais pacotes

::: incremental
::: {style="font-size: 65%;"}
-   [graphics](http://search.r-project.org/R/library/graphics/html/00Index.html): simples e útil para visualizações rápidas

- [lattice](https://lattice.r-forge.r-project.org/): integração a modelos estatísticos

-   [ggplot2](https://ggplot2.tidyverse.org/): integrado ao tidyverse, possui uma sintaxe própria baseada na gramática de gráficos por camadas (*layers*)

-   [ggplot2 extentions](https://exts.ggplot2.tidyverse.org/): conjunto de pacotes com diversas expansões ao pacote [ggplot2](https://ggplot2.tidyverse.org/). Exemplos: [GGally](https://ggobi.github.io/ggally/), [gganimate](https://gganimate.com/) e [esquisse](https://dreamrs.github.io/esquisse/)

- [ggdist](https://mjskay.github.io/ggdist): visualizar distribuições e incertezas

-   [visdat](https://docs.ropensci.org/visdat/), [corrplot](https://github.com/taiyun/corrplot) e [DataExplorer](https://boxuancui.github.io/DataExplorer/): visualizações preliminares de conjuntos de dados

-   [ggpubr](https://rpkgs.datanovia.com/ggpubr/): fornece funções simplificadas para criar gráficos para publicação

- [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot): gráficos com detalhes de testes estatísticos

-   [cowplot](https://wilkelab.org/cowplot/) e [patchwork](https://patchwork.data-imaginist.com/): permite combinar vários gráficos

- [plotly](https://plotly.com/r/): gráficos interativos usando JavaScript (*plotly.js*)

- [echarts4r](https://echarts4r.john-coene.com): gráficos interativos dentro do Shiny

- [cols4all](https://cols4all.github.io/cols4all-R/index.html): escolha de paleta de cores
:::
:::

## Pacotes que serão apresentados

<br>

- [graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)

- [ggplot2](https://ggplot2.tidyverse.org/)

- [ggpubr](https://rpkgs.datanovia.com/ggpubr/)

- [cols4all](https://cols4all.github.io/cols4all-R/index.html)

- [GGally](https://ggobi.github.io/ggally/)

- [gganimate](https://gganimate.com/)

- [plotly](https://plotly.com/r/)

- [esquisse](https://dreamrs.github.io/esquisse/)

# 

<center>
<img src="img/package_palmerpenguins.png" style="width:50%"/>
</center>

::: footer
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

## palmerpenguins

```{r eval=FALSE}
# instalar 
install.packages("palmerpenguins")

# carregar
library(palmerpenguins)

# ajuda dos dados
?penguins
?penguins_raw
```

```{r echo=FALSE}
library(palmerpenguins)
```

<center>
<img src="img/culmen_depth.png" style="width:50%"/>
</center>

::: footer
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

# 

<center>
<img src="img/package_graphics.png" style="width:50%"/>
</center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## graphics {.smaller}

-   Default do R e mais simples

-   Pode ser utilizado para objetos de diversas classes

-   Funções:

<br>

::::: columns
::: {.column width="30%"}
`plot()`<br> `hist()`<br> `barplot()`<br> `boxplot()`<br> `abline()`<br> `points()`<br> `lines()`<br> `polygon()`<br>
:::

::: {.column width="70%"}
```{r warning=FALSE, message=FALSE, fig.align="center"}
# graphics
plot(flipper_length_mm ~ body_mass_g, data = penguins)
```
:::
:::::

# 

<center>
<img src="img/package_ggplot2.png" style="width:50%"/>
</center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## ggplot2 {.smaller}

-   Integrado ao `tidyverse`, possui uma sintaxe própria de camadas (*layers*)

-   Necessita de funções específicas para objetos de classes diferentes

-   Funções:

::::: columns
::: {.column width="30%"}
`ggplot() +`<br> `aes() +`<br> `geom_() +`<br> `facet_() +`<br> `stats_() +`<br> `coord_() +`<br> `theme_()`<br>
:::

::: {.column width="70%"}
```{r warning=FALSE, message=FALSE, fig.align="center"}
# ggplot2
library(ggplot2)
ggplot(data = penguins) + aes(x = body_mass_g, y = flipper_length_mm) + geom_point()
```
:::
:::::

# 

<center>
<img src="img/package_ggpubr.png" style="width:50%"/>
</center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## ggpubr {.smaller}

-   Funções para criar e personalizar plots para publicações baseadas no [ggplot2](https://ggplot2.tidyverse.org/)

-   Necessita de funções específicas para gerar gráficos específicos

-   Funções:

::::: columns
::: {.column width="30%"}
`gghistogram()`<br> `ggdensity()`<br> `ggboxplot()`<br> `ggviolin()`<br> `ggbarplot()`<br> `ggscatter()`<br>
:::

::: {.column width="70%"}
```{r warning=FALSE, message=FALSE, fig.align="center"}
# ggpubr
library(ggpubr)
ggscatter(penguins, x = "body_mass_g", y = "flipper_length_mm")
```
:::
:::::

# Gramática dos gráficos

## Descrição

Wilkinson (2005) *Grammar of Graphics*: representação gráfica dos dados a partir de atributos estéticos (do inglês *aesthetic*)

![](img/cover_grammar_graphics.jpg){.absolute width="200" height="300" right="830" top="300"} ![](img/ggplot2_structure.png){.absolute width="750" height="450" right="0" top="200"}

::: footer
[Wilkinson (2005)](https://www.springer.com/gp/book/9780387245447)
:::

## Camadas (*layers*)

<center>
<img src="img/plot_ggplot.gif" style="width:100%"/>
</center>

::: footer
[Think About the Grammar of Graphics When Improving Your Graphs](https://medium.com/tdebeus/think-about-the-grammar-of-graphics-when-improving-your-graphs-18e3744d8d18)
:::

## ggplot2

Wickham (2008) criou o pacote `ggplot2`, onde "gg" representa a contração de *Grammar of Graphics*

![](img/cover_ggplot2.jpg){.absolute width="200" height="300" right="830" top="300"} ![](img/ggplot2_gramatica.png){.absolute width="750" height="450" right="0" top="200"}

::: footer
[Wickham (2008)](https://ggplot2-book.org/)
:::

# Paleta de cores

# 

<center>
<img src="img/cols4all_logo.png" style="width:50%"/>
</center>

::: footer
[cols4all](https://cols4all.github.io/cols4all-R/index.html)
:::

## Paleta de cores

**Por que usar paletas de cores**

::: {style="font-size: 70%;"}
- A cor é fundamental para **comunicar padrões visuais** e **categorias**  
- Escolhas inadequadas podem **distorcer interpretações**
- Paletas bem definidas garantem **consistência e acessibilidade**
:::

<center>
<img src="img/pallete_colors.png" style="width:45%"/>
</center>

::: footer
[Types of color palettes: Definition, examples, + tips](https://www.figma.com/resource-library/types-of-color-palettes/)
:::


## Paleta de cores

**Tipos de Paletas**

::: {style="font-size: 55%;"}
| Tipo | Uso                        | Exemplo             |
|------|----------------------------|------------------------------|
| **Categóricas** | Categorias sem ordem | `RColorBrewer::brewer.pal(3, "Set2")` |
| **Sequenciais** | Dados ordenados (baixa → alta) | `viridis::viridis(10)` |
| **Divergentes** | Valores centrados em um ponto médio | `RColorBrewer::brewer.pal(11, "RdBu")` |
:::

<center>
<img src="img/palette-types-1.png" style="width:65%"/>
</center>

::: footer
[Elegant and informative maps with tmap (2021)](https://r-tmap.github.io/tmap-book/visual-variables.html)
:::

## Paleta de cores

**cols4all**

```{r eval=FALSE}
cols4all::c4a_gui()
```

<center>
<img src="img/cols4all2.jpg" style="width:70%"/>
</center>

::: footer
[cols4all](https://cols4all.github.io/cols4all-R/index.html)
:::

# Principais tipos de gráficos

## Elementos de um gráfico

Representações das colunas (eixos) e linhas (elementos)

<center><img src="img/plot_data_table_scatterplot.png" style="width:90%"/></center>

## Tipos de variáveis

![](img/plot_variables.png){.absolute width="500" height="250" right="300" top="100"}

![](img/nominal_ordinal_binary.png){.absolute width="500" height="350" right="550" top="350"}

![](img/continuous_discrete_inv.png){.absolute width="500" height="350" right="50" top="350"}

::: footer
[Matthiopoulos (2011)](http://greenmaths.st-andrews.ac.uk/), 
Artwork by [@allison_horst](https://x.com/allison_horst)
:::

## Tipos de variáveis e tipos gráficos

<br>

<center><img src="img/ggplot_data_from_viz.png" style="width:85%"/></center>

::: footer
[from Data to Viz](https://www.data-to-viz.com/)
:::

## Tipos de variáveis e tipos gráficos

<center><img src="img/r_charts_suggests.png" style="width:100%"/></center>

## R CHARTS

<center><img src="img/rcharts-featured.png" style="width:100%"/></center>

::: footer
[R CHARTShttps://r-charts.com/](https://r-charts.com/)
:::

# Histograma (*Histogram*)

## Histograma (*Histogram*)

-   Representa dados de uma coluna

-   Dados do tipo discreto ou contínuo

-   Distribuição de frequência ou densidade

![](img/plot_histogram.png){.absolute width="350" height="350" right="550" top="310"}

![](img/plot_density.png){.absolute width="350" height="350" right="100" top="310"}

::: footer
[histogram](https://www.data-to-viz.com/graph/histogram.html), [density](https://www.data-to-viz.com/graph/density.html)
:::

## Histograma (*Histogram*)

<br>

<center><img src="img/hist_fig1.gif" style="width:80%"/></center>

. . .

<br>

<center><img src="img/hist_fig2.gif" style="width:80%"/></center>

::: footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

## Histograma (*Histogram*)

<center><img src="img/hist_fig3.gif" style="width:55%"/></center>

::: footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

## Densidade (*Density*)

<br><br>

<center><img src="img/hist_fig5.jpg" style="width:100%"/></center>

::: footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

## Densidade (*Density*)

![](img/hist_fig6.gif){.absolute width="550" height="350" right="550" top="250"}

. . .

![](img/hist_fig7.gif){.absolute width="560" height="340" right="-50" top="265"}

::: footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Histograma (*Histogram*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
hist(penguins$flipper_length_mm)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
hist(penguins$flipper_length_mm)
```
:::
:::::

## Histograma (*Histogram*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray")
```
:::
:::::

## Histograma (*Histogram*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins")
```
:::
:::::

## Histograma (*Histogram*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência")
```
:::
:::::

## Histograma (*Histogram*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     br = 50)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     br = 50)
```
:::
:::::

## Histograma (*Histogram*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
```
:::
:::::

## Densidade (*Density*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5,
     prob = TRUE)
lines(density(na.omit(penguins$flipper_length_mm)))
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5,
     prob = TRUE)
lines(density(na.omit(penguins$flipper_length_mm)))
```
:::
:::::

## Densidade (*Density*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
plot(density(na.omit(penguins$flipper_length_mm)),
     col = "gray50",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
polygon(density(na.omit(penguins$flipper_length_mm)), 
        col = "gray50")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(5, 5, 5, 5))
plot(density(na.omit(penguins$flipper_length_mm)),
     col = "gray50",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
polygon(density(na.omit(penguins$flipper_length_mm)), 
        col = "gray50")
```
:::
:::::

## Densidade (*Density*)

**Exportar**

```{r eval=FALSE}
# diretorio
setwd("/home/mude/data/github/course-intror/data")

png("plot_densidade.png"), wi = 15, he = 15, un = "cm", res = 300)
```

<br>

. . .

```{r eval = FALSE}
par(mar = c(5, 5, 5, 5))
plot(density(na.omit(penguins$flipper_length_mm)),
     col = "gray50",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     cex.main = 2,  cex.lab = 2, cex.axis = 1.5)
polygon(density(na.omit(penguins$flipper_length_mm)), col = "gray50")
```

<br>

. . .

```{r eval=FALSE}
dev.off()
```

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm))
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins,
       aes(x = flipper_length_mm))
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm)) +
  geom_histogram()
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins,
       aes(x = flipper_length_mm)) +
  geom_histogram()
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm)) +
  geom_histogram(color = "black", fill = "cyan4", bins = 10)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm)) +
  geom_histogram(color = "black", fill = "cyan4", bins = 10)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm)) +
  geom_histogram(color = "black", fill = "cyan4", 
                 bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm)) +
  geom_histogram(color = "black", fill = "cyan4", 
                 bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5, position = "dodge") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5, position = "dodge") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(alpha = .5, position = "identity") +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(alpha = .5, position = "identity") +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_wrap(~ species, ncol = 2, scale = "free_y") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_wrap(~ species, ncol = 2, scale = "free_y") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::::

## Histograma (*Histogram*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_grid(species ~ .) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_grid(species ~ .) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::::

## Densidade (*Density*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins) +
  aes(x = flipper_length_mm) +
  geom_density(color = "black", fill = "cyan4", alpha = .5) + 
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Densidade") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins) +
  aes(x = flipper_length_mm) +
  geom_density(color = "black", fill = "cyan4", alpha = .5) + 
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Densidade") +
  theme_bw(base_size = 20)
```
:::
:::::

## Densidade (*Density*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = .5) +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(x = "Comprimento da nadadeira (mm)", 
       y = "Densidade", 
       fill = "Espécie") +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = .5) +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(x = "Comprimento da nadadeira (mm)", 
       y = "Densidade", 
       fill = "Espécie") +
  theme_bw(base_size = 20)
```
:::
:::::

## Densidade (*Density*)

**ggplot2**

```{r}
#| eval: false
ggplot_densidade <- ggplot(data = penguins, 
                           aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = .5) +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(x = "Comprimento da nadadeira (mm)", 
       y = "Densidade", 
       fill = "Espécie") +
  theme_bw(base_size = 20)

ggsave(filename = "density_ggplot2.png", 
       plot = ggplot_densidade, wi = 20, he = 15, un = "cm", dpi = 300)
```

# 

<center><img src="img/package_ggpubr.png" style="width:50%"/></center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## Histograma (*Histogram*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
gghistogram(data = penguins, 
            x = "flipper_length_mm",
            add = "median",
            color = "species",
            fill = "species",
            palette = c("darkorange", "darkorchid", "cyan4"),
            xlab = "Comprimento da nadadeira (mm)",
            ylab = "Frequência")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
gghistogram(data = penguins, 
            x = "flipper_length_mm",
            add = "median",
            color = "species",
            fill = "species",
            palette = c("darkorange", "darkorchid", "cyan4"),
            xlab = "Comprimento da nadadeira (mm)",
            ylab = "Frequência")
```
:::
:::::

## Densidade (*Density*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggdensity(data = penguins, 
          x = "flipper_length_mm",
          add = "median",
          color = "species",
          fill = "species",
          palette = c("darkorange", "darkorchid", "cyan4"),
          xlab = "Comprimento da nadadeira (mm)",
          ylab = "Densidade")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggdensity(data = penguins, 
          x = "flipper_length_mm",
          add = "median",
          color = "species",
          fill = "species",
          palette = c("darkorange", "darkorchid", "cyan4"),
          xlab = "Comprimento da nadadeira (mm)",
          ylab = "Densidade")
```
:::
:::::

## Histograma (*Histogram*)

**ggpubr**

```{r}
#| eval: false
ggpubr_densidade <- ggdensity(data = penguins,
                              x = "flipper_length_mm",
                              add = "median",
                              color = "species",
                              fill = "species",
                              palette = c("darkorange", "darkorchid", "cyan4"),
                              xlab = "Comprimento da nadadeira (mm)",
                              ylab = "Densidade")

ggsave(filename = "densidade_ggpubr.png", 
       plot = ggpubr_densidade, wi = 20, he = 15, un = "cm", dpi = 300)
```

# Gráfico de setores <br> (*Pie chart*)

## Gráfico de setores (*Pie chart*)

-   Representa dados de uma coluna

-   Dados do tipo categórico

-   Proporção ou porcentagem de dados categóricos

![](img/plot_pie.png){.absolute width="350" height="350" right="360" top="310"}

::: footer
[pie](https://www.data-to-viz.com/caveat/pie.html)
:::

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico de setores (*Pie chart*)

**graphic**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(0, 1, 0, 1))
pie(c(280, 60, 20),
    c("Sky", 
      "Sunny side of pyramid", 
      "Shady side of pyramid"),
    col = c("#0292D8", 
            "#F7EA39", 
            "#C4B632"),
    init.angle = -50, border = NA)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(0, 1, 0, 1))
pie(c(280, 60, 20),
    c("Sky", "Sunny side of pyramid", "Shady side of pyramid"),
    col = c("#0292D8", "#F7EA39", "#C4B632"),
    init.angle = -50, border = NA)
```
:::
:::::

## Gráfico de setores (*Pie chart*)

```{r}
# calculo da proporcao
penguins_prop <- penguins %>%
  dplyr::count(species) %>% 
  dplyr::mutate(prop = round(n/sum(n), 4)*100)
penguins_prop
```

## Gráfico de setores (*Pie chart*)

**graphic**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
pie(penguins_prop$prop,
    labels = paste(penguins_prop$prop, "%"), 
    main = "Espécies",
    col = c("darkorange", "darkorchid", "cyan4"))
legend("topright", legend = penguins_prop$species, 
       fill = c("darkorange", "darkorchid", "cyan4"))
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_prop <- penguins %>%
  dplyr::count(species) %>% 
  dplyr::mutate(prop = round(n/sum(n), 4)*100)

par(mar = c(5, 5, 5, 5))
pie(penguins_prop$prop,
    labels = paste(penguins_prop$prop, "%"), 
    main = "Espécies",
    col = c("darkorange", "darkorchid", "cyan4"))
legend("topright", legend = penguins_prop$species, 
       fill = c("darkorange", "darkorchid", "cyan4"))
```
:::
:::::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de setores (*Pie chart*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins_prop, 
       aes(x = "", y = prop, fill = species)) + 
  geom_bar(stat = "identity", color = "white") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(prop, "%")), color = "white", 
            position = position_stack(vjust = .5), size = 8) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_void() +
  labs(fill = "Espécie")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_prop <- penguins %>%
  dplyr::count(species) %>% 
  dplyr::mutate(prop = round(n/sum(n), 4)*100)

ggplot(data = penguins_prop, 
       aes(x = "", y = prop, fill = species)) + 
  geom_bar(stat = "identity", color = "white") +
  coord_polar("y", start = 0) +
  geom_text(aes(label = paste0(prop, "%")), color = "white", 
            position = position_stack(vjust = .5), size = 8) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_void() +
  labs(fill = "Espécie")
```
:::
:::::

# 

<center><img src="img/package_ggpubr.png" style="width:50%"/></center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## Gráfico de setores (*Pie chart*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggpie(penguins_prop,
      "prop", 
      label = "prop",
      lab.pos = "in", 
      lab.font = c(8, "white"),
      fill = "species", 
      color = "white",
      palette = c("darkorange", "purple", "cyan4"))
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_prop <- penguins %>%
  dplyr::count(species) %>% 
  dplyr::mutate(prop = round(n/sum(n), 4)*100)

ggpie(penguins_prop,
      "prop", 
      label = "prop",
      lab.pos = "in", 
      lab.font = c(8, "white"),
      fill = "species", 
      color = "white",
      palette = c("darkorange", "purple", "cyan4"))
```
:::
:::::

# Polêmica 1!!!

# Gráfico de setores (*Donut chart*)

## Gráfico de setores (*Donut chart*)

-   Representa dados de uma coluna

-   Dados do tipo categórico

-   Proporção ou porcentagem de dados categóricos

![](img/plot_donut.png){.absolute width="350" height="350" right="360" top="310"}

::: footer
[donut](https://r-graph-gallery.com/doughnut-plot)
:::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de setores (*Donut chart*)

**ggplot**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins_prop, aes(x = 2, y = prop, fill = species)) +
  geom_bar(stat = "identity") +
  coord_polar(theta = "y", start = 0) +
  geom_text(aes(label = paste0(prop, "%")), color = "white",
            position = position_stack(vjust = .5), size = 5) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  xlim(0, 2.5) +
  theme_void() +
  theme(legend.position = c(.5, .5),
        legend.title = element_text(size = 20),
        legend.text = element_text(size = 15)) +
  labs(fill = "Espécie")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
penguins_prop <- penguins %>%
  dplyr::count(species) %>% 
  dplyr::mutate(prop = round(n/sum(n), 4)*100)

ggplot(data = penguins_prop, aes(x = 2, y = prop, fill = species)) +
  geom_bar(stat = "identity") +
  coord_polar(theta = "y", start = 0) +
  geom_text(aes(label = paste0(prop, "%")), color = "white",
            position = position_stack(vjust = .5), size = 5) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  xlim(0, 2.5) +
  theme_void() +
  theme(legend.position = c(.5, .5),
        legend.title = element_text(size = 20),
        legend.text = element_text(size = 15)) +
  labs(fill = "Espécie")
```
:::
:::::

# 

<center><img src="img/package_ggpubr.png" style="width:50%"/></center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## Gráfico de setores (*Donut chart*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggdonutchart(penguins_prop,
             "prop", 
             label = "prop",
             lab.pos = "in", 
             lab.font = c(7, "white"),
             fill = "species", 
             color = "white",
             palette = c("darkorange", "purple", "cyan4"))
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_prop <- penguins %>%
  dplyr::count(species) %>% 
  dplyr::mutate(prop = round(n/sum(n), 4)*100)

ggdonutchart(penguins_prop,
             "prop", 
             label = "prop",
             lab.pos = "in", 
             lab.font = c(7, "white"),
             fill = "species", 
             color = "white",
             palette = c("darkorange", "purple", "cyan4"))
```
:::
:::::

# Gráfico de barras <br> (*Bar plot*)

## Gráfico de barras (*Bar plot*)

-   Representa dados de duas colunas

-   Dados do tipo categóricos: X = categórico e Y = categórico

-   Resume dados de contagens para uma coluna

![](img/plot_barplot.png){.absolute width="350" height="350" right="360" top="310"}

::: footer
[barplot](https://www.data-to-viz.com/graph/barplot.html)
:::

## Gráfico de barras (*Bar plot*)

**Tabela de Frequência**

```{r}
# numero de individuos coletados
penguins_count <- penguins %>%
  dplyr::count(species)
penguins_count
```

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico de barras (*Bar plot*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
barplot(n ~ species,
        data = penguins_count, 
        col = c("darkorange", "purple", "cyan4"),
        main = "Número de indivíduos coletados por espécie",
        xlab = "Espécies",
        ylab = "Frequência absoluta",
        cex.main = 1.5,
        cex.lab = 1.3,
        cex.axis = 1.2)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_count <- penguins %>%
  dplyr::count(species)

barplot(n ~ species,
        data = penguins_count, 
        col = c("darkorange", "purple", "cyan4"),
        main = "Número de indivíduos coletados por espécie",
        xlab = "Espécies",
        ylab = "Frequência absoluta",
        cex.main = 1.5,
        cex.lab = 1.3,
        cex.axis = 1.2)
```
:::
:::::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de barras (*Bar plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins_count, 
       aes(x = species, y = n, fill = species)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = n), fill = "white", size = 10) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  theme(legend.position = "none") +
  labs(x = "Espécie", 
       y = "Número de indivíduos", 
       fill = "Espécie")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_count <- penguins %>%
  dplyr::count(species)

ggplot(data = penguins_count, 
       aes(x = species, y = n, fill = species)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = n), fill = "white", size = 10) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  theme(legend.position = "none") +
  labs(x = "Espécie", 
       y = "Número de indivíduos", 
       fill = "Espécie")
```
:::
:::::

## Gráfico de barras (*Bar plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins_count, 
       aes(x = species, y = n, fill = species)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = n), fill = "white", size = 10) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  coord_flip() +
  theme_bw(base_size = 15) +
  theme(legend.position = "none") +
  labs(x = "Espécie", 
       y = "Número de indivíduos", 
       fill = "Espécie")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_count <- penguins %>%
  dplyr::count(species)

ggplot(data = penguins_count, 
       aes(x = species, y = n, fill = species)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = n), fill = "white", size = 10) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  coord_flip() +
  theme_bw(base_size = 15) +
  theme(legend.position = "none") +
  labs(x = "Espécie", 
       y = "Número de indivíduos", 
       fill = "Espécie")
```
:::
:::::

# 

<center><img src="img/package_ggpubr.png" style="width:50%"/></center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## Gráfico de barras (*Bar plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggbarplot(penguins_count,
          x = "species",
          y = "n", 
          fill = "species", 
          color = "species",
          palette = c("darkorange", "purple", "cyan4"),
          label = TRUE, 
          lab.pos = "in", 
          lab.col = "white",
          lab.size = 8,
          main = "Número de indivíduos coletados por espécie",
          xlab = "Espécies",
          ylab = "Frequência absoluta",
          legend = "none")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_count <- penguins %>%
  dplyr::count(species)

ggbarplot(penguins_count,
          x = "species",
          y = "n", 
          fill = "species", 
          color = "species",
          palette = c("darkorange", "purple", "cyan4"),
          label = TRUE, 
          lab.pos = "in", 
          lab.col = "white",
          lab.size = 8,
          main = "Número de indivíduos coletados por espécie",
          xlab = "Espécies",
          ylab = "Frequência absoluta",
          legend = "none")
```
:::
:::::

## Gráfico de barras (*Bar plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggbarplot(penguins_count,
          x = "species",
          y = "n", 
          fill = "species", 
          color = "species",
          palette = c("darkorange", "purple", "cyan4"),
          label = TRUE, 
          lab.pos = "out", 
          lab.col = "black",
          lab.size = 8,
          main = "Número de indivíduos coletados por espécie",
          xlab = "Espécies",
          ylab = "Frequência absoluta",
          legend = "none",
          orientation = "horiz")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_count <- penguins %>%
  dplyr::count(species)

ggbarplot(penguins_count,
          x = "species",
          y = "n", 
          fill = "species", 
          color = "species",
          palette = c("darkorange", "purple", "cyan4"),
          label = TRUE, 
          lab.pos = "out", 
          lab.col = "black",
          lab.size = 8,
          main = "Número de indivíduos coletados por espécie",
          xlab = "Espécies",
          ylab = "Frequência absoluta",
          legend = "none",
          orientation = "horiz")
```
:::
:::::

# Polêmica 2!!!

## Gráfico de barras (*Bar plot*)

**Gráfico dinamite (*Dynamite plot*)**

![](img/dynamite_plot01.png){.absolute width="600" height="500" right="600" top="180"}

![](img/dynamite_plot02.png){.absolute width="800" height="550" right="-200" top="140"}

:::footer
[Gráficos dinamite: usá-los ou não, eis a questão](https://fernandafperes.com.br/blog/graficos-dinamite/)
:::

## Gráfico de barras (*Bar plot*)

**Gráfico dinamite (*Dynamite plot*) - alternativas**

![](img/dynamite_plot03.png){.absolute width="600" height="500" right="600" top="180"}
![](img/dynamite_plot04.png){.absolute width="350" height="250" right="250" top="180"}
![](img/dynamite_plot06.png){.absolute width="350" height="250" right="-120" top="180"}
![](img/dynamite_plot07.png){.absolute width="350" height="250" right="250" top="450"}
![](img/dynamite_plot08.png){.absolute width="350" height="250" right="-120" top="450"}

## Gráfico de barras (*Bar plot*)

**Gráfico dinamite (*Dynamite plot*)** - **ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false

penguins_flipper_length_mn_sd <- penguins %>%
  dplyr::group_by(species) %>% 
  dplyr::summarise(mean = mean(flipper_length_mm, na.rm = TRUE),
                   sd = sd(flipper_length_mm, na.rm = TRUE))

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  stat_summary(fun = mean,
               geom = "col",
               color = "black",
               show.legend = FALSE) +
  stat_summary(fun.data = mean_se,
               geom = "errorbar",
               width = 0.15,
               linewidth = 0.8) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_flipper_length_mn_sd <- penguins %>%
  dplyr::group_by(species) %>% 
  dplyr::summarise(mean = mean(flipper_length_mm, na.rm = TRUE),
                   sd = sd(flipper_length_mm, na.rm = TRUE))

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  stat_summary(fun = mean,
               geom = "col",
               color = "black",
               show.legend = FALSE) +
  stat_summary(fun.data = mean_se,
               geom = "errorbar",
               width = 0.15,
               linewidth = 0.8) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::
:::::

## Gráfico de barras (*Bar plot*)

**Gráfico dinamite (*Dynamite plot*)** - **ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false

penguins_flipper_length_mn_sd <- penguins %>%
  dplyr::group_by(species) %>% 
  dplyr::summarise(mean = mean(flipper_length_mm, na.rm = TRUE),
                   sd = sd(flipper_length_mm, na.rm = TRUE))

ggbarplot(penguins,
          x = "species",
          y = "flipper_length_mm",
          fill = "species",
          color = "gray30",              
          palette = c("darkorange", "purple", "cyan4"),
          add = "mean_se",
          add.params = list(size = 1),
          main = "Tamanho médio da barbatana por espécie (desvio padrão)",
          xlab = "Espécies",
          ylab = "Frequência absoluta",
          legend = "none")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins_flipper_length_mn_sd <- penguins %>%
  dplyr::group_by(species) %>% 
  dplyr::summarise(mean = mean(flipper_length_mm, na.rm = TRUE),
                   sd = sd(flipper_length_mm, na.rm = TRUE))

ggbarplot(penguins,
          x = "species",
          y = "flipper_length_mm",
          fill = "species",
          color = "gray30",              
          palette = c("darkorange", "purple", "cyan4"),
          add = "mean_se",
          add.params = list(size = 1),
          main = "Tamanho médio da barbatana por espécie (desvio padrão)",
          xlab = "Espécies",
          ylab = "Frequência absoluta",
          legend = "none")
```
:::
:::::

# Gráfico de caixas <br> (*Box plot*)

## Gráfico de caixas (*Box plot*)

-   Representa dados de duas colunas

-   Dados do tipo categóricos: X = categórico e Y = contínuo

-   Resume informações de medidas contínuas para dois ou mais fatores categóricos

![](img/plot_boxplot.png){.absolute width="350" height="350" right="360" top="310"}

::: footer
[boxplot](https://www.data-to-viz.com/caveat/boxplot.html)
:::

## Gráfico de caixas (*Box plot*)

-   Intervalo inter-quartil (*interquartile range* - IQR)

-   Limite inferior e limite superipor (1.5 x IQR)

-   Valores exteriores (*outliers*)

![](img/plot_boxplot1.png){.absolute width="500" height="280" right="520" top="350"} ![](img/plot_boxplot2.png){.absolute width="430" height="430" right="50" top="250"}

::: footer
[Understanding Boxplots](https://www.kdnuggets.com/2019/11/understanding-boxplots.html)
:::

## Gráfico de caixas (*Box plot*)

<br>

<center><img src="img/boxplotfig1.gif" style="width:80%"/></center>

. . .

<center><img src="img/boxplotfig2.gif" style="width:80%"/></center>

::: footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>

<center><img src="img/boxplotfig3.gif" style="width:80%"/></center>

. . .

<center><img src="img/boxplotfig4.gif" style="width:80%"/></center>

::: footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>

<center><img src="img/boxplotfig5.gif" style="width:80%"/></center>

. . .

![](img/boxplotfig7.gif){.absolute width="1000" height="350" right="-190" top="340"}

::: footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br><br><br>

<center><img src="img/boxplotfig6.gif" style="width:100%"/></center>

::: footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>

<center><img src="img/boxplotfig8.gif" style="width:60%"/></center>

::: footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>

<center><img src="img/boxplotfig9.gif" style="width:80%"/></center>

::: footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico de caixas (*Box plot*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        border = "black",
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5,
        cex.lab = 1.3,
        cex.axis = 1.2)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        border = "black",
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5,
        cex.lab = 1.3,
        cex.axis = 1.2)
```
:::
:::::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de caixas (*Box plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::
:::::

## Gráfico de caixas (*Box plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::
:::::

## Gráfico de caixas (*Violin plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_violin(width = .3, 
              show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(title = "Pontos com jitter", x = "Species", y = "Flipper length (mm)")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_violin(width = .3, 
              show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(title = "Pontos com jitter", x = "Species", y = "Flipper length (mm)")
```
:::
:::::

# 

<center><img src="img/package_ggpubr.png" style="width:50%"/></center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## Gráfico de caixas (*Box plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggboxplot(data = penguins, 
          x = "species", 
          y = "flipper_length_mm",
          add = "jitter", 
          shape = "species",
          fill = "species",
          color = "black",
          palette = c("darkorange", "purple", "cyan4"),
          xlab = "Comprimento da nadadeira (mm)",
          ylab = "Frequência absoluta",
          legend = "none")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggboxplot(data = penguins, 
          x = "species", 
          y = "flipper_length_mm",
          add = "jitter", 
          shape = "species",
          fill = "species",
          color = "black",
          palette = c("darkorange", "purple", "cyan4"),
          xlab = "Comprimento da nadadeira (mm)",
          ylab = "Frequência absoluta",
          legend = "none")
```
:::
:::::

## Gráfico de caixas (*Violin plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggviolin(data = penguins, 
         x = "species", 
         y = "flipper_length_mm",
         add = "jitter", 
         shape = "species",
         fill = "species",
         color = "black",
         palette = c("darkorange", "purple", "cyan4"),
         xlab = "Comprimento da nadadeira (mm)",
         ylab = "Frequência absoluta",
         legend = "none")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggviolin(data = penguins, 
         x = "species", 
         y = "flipper_length_mm",
         add = "jitter", 
         shape = "species",
         fill = "species",
         color = "black",
         palette = c("darkorange", "purple", "cyan4"),
         xlab = "Comprimento da nadadeira (mm)",
         ylab = "Frequência absoluta",
         legend = "none")
```
:::
:::::

## Gráfico de caixas (*Rain plot*)

**ggdist**

<center><img src="img/rainplot-penguins.png" style="width:70%"/></center>

::: footer
[Visualizing Distributions with Raincloud Plots (and How to Create Them with ggplot2)](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/)
:::

# Gráfico de dispersão (*Scatter plot*)

## Gráfico de dispersão (*Scatter plot*)

-   Representa dados de duas colunas

-   Dados do tipo categóricos: X = contínuo e Y = contínuo

-   Plota a relação entre duas variáveis contínuas

![](img/plot_scatter.png){.absolute width="350" height="350" right="360" top="310"}

::: footer
[scatterplot](https://www.data-to-viz.com/graph/scatter.html)
:::

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico de dispersão (*Scatter plot*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 1, 1))
plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5,
     cex.axis = 1.3,
     bty = "l")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

par(mar = c(5, 5, 1, 1))
plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5,
     cex.axis = 1.3,
     bty = "l")
```
:::
:::::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```
:::
:::::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```
:::
:::::

## Gráfico de dispersão (*Scatter plot*) {.smaller}

Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing

**Justin Matejka, George Fitzmaurice**

<center><img src="img/gif_data_dino_statistics.gif" style="width:100%"/></center>

::: footer
[Matejka & Fitzmaurice (2017)](https://www.autodeskresearch.com/publications/samestats)
:::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# package
library(datasauRus)

# data + plot
datasaurus_dozen %>% 
  dplyr::filter(dataset == "dino") %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 5, alpha = .75, pch = 21) +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# package
library(datasauRus)

# data + plot
datasaurus_dozen %>% 
  dplyr::filter(dataset == "dino") %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 5, alpha = .75, pch = 21) +
  theme_bw(base_size = 20)
```
:::
:::::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
datasaurus_dozen %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 1, alpha = .75, pch = 21) +
  facet_wrap(~dataset) +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

datasaurus_dozen %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 1, alpha = .75, pch = 21) +
  facet_wrap(~dataset) +
  theme_bw(base_size = 20)
```
:::
:::::

# 

<center><img src="img/package_ggpubr.png" style="width:50%"/></center>

::: footer
[ggpubr](https://rpkgs.datanovia.com/ggpubr/)
:::

## Gráfico de dispersão (*Scatter plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggscatter(data = penguins,
          x = "flipper_length_mm", 
          y = "bill_depth_mm",
          color = "species",
          fill = "species",
          palette = c("darkorange", "purple", "cyan4"),
          shape = "species", 
          size = 5,
          xlab = "Comprimento do bico (mm)", 
          ylab = "Profundidade do bico (mm)")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggscatter(data = penguins,
          x = "flipper_length_mm", 
          y = "bill_depth_mm",
          color = "species",
          fill = "species",
          palette = c("darkorange", "purple", "cyan4"),
          shape = "species", 
          size = 5,
          xlab = "Comprimento do bico (mm)", 
          ylab = "Profundidade do bico (mm)")
```
:::
:::::

## Gráfico de dispersão (*Scatter plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggscatter(data = penguins,
          x = "flipper_length_mm", 
          y = "bill_depth_mm",
          color = "species",
          fill = "species",
          palette = c("darkorange", "purple", "cyan4"),
          shape = "species", 
          size = 5,
          xlab = "Comprimento do bico (mm)", 
          ylab = "Profundidade do bico (mm)",
          ellipse = TRUE, 
          mean.point = TRUE)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggscatter(data = penguins,
          x = "flipper_length_mm", 
          y = "bill_depth_mm",
          color = "species",
          fill = "species",
          palette = c("darkorange", "purple", "cyan4"),
          shape = "species", 
          size = 5,
          xlab = "Comprimento do bico (mm)", 
          ylab = "Profundidade do bico (mm)",
          ellipse = TRUE, 
          mean.point = TRUE)
```
:::
:::::

## Gráfico de dispersão (*Scatter plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggscatter(data = datasaurus_dozen %>% 
            dplyr::filter(dataset == "dino"),
          x = "x", 
          y = "y",
          size = 5,
          xlab = "X", 
          ylab = "Y")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggscatter(data = datasaurus_dozen %>% 
            dplyr::filter(dataset == "dino"),
          x = "x", 
          y = "y",
          size = 5,
          xlab = "X", 
          ylab = "Y")
```
:::
:::::

## Gráfico de dispersão (*Scatter plot*)

**ggpubr**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggscatter(data = datasaurus_dozen,
          x = "x", 
          y = "y",
          size = 1,
          xlab = "X", 
          ylab = "Y",
          facet.by = "dataset")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggscatter(data = datasaurus_dozen,
          x = "x", 
          y = "y",
          size = 1,
          xlab = "X", 
          ylab = "Y",
          facet.by = "dataset")
```
:::
:::::

# Gráfico pareado <br> (*Pairs plot*)

## Gráfico pareado (*Pairs plot*)

-   Representa dados de duas colunas

-   Dados do tipo categóricos: X = contínuo e Y = contínuo

-   Plota a relação entre duas variáveis contínuas, mas para várias colunas

![](img/plot_correlogram.png){.absolute width="350" height="350" right="360" top="310"}

::: footer
[correlogram](https://www.data-to-viz.com/#correlogram)
:::

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico pareado (*Pairs plot*)

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  pairs(pch = 20,
        upper.panel = NULL)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  pairs(pch = 20,
        upper.panel = NULL)
```
:::
:::::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[GGally](http://ggobi.github.io/ggally/)
:::

## Gráfico pareado (*Pairs plot*)

**GGally**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("GGally")
library(GGally)

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  ggpairs() +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# pacote
# install.packages("GGally")
library(GGally)

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  ggpairs() +
  theme_bw(base_size = 20)
```
:::
:::::

## Gráfico pareado (*Pairs plot*)

**GGally**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false

penguins %>%
  dplyr::select(species, sex, body_mass_g, ends_with("_mm")) %>%
  GGally::ggpairs(aes(color = species)) +
  scale_colour_manual(values = c("darkorange", "purple", "cyan4")) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 20)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins %>%
  dplyr::select(species, sex, body_mass_g, ends_with("_mm")) %>%
  GGally::ggpairs(aes(color = species)) +
  scale_colour_manual(values = c("darkorange", "purple", "cyan4")) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 20)
```
:::
:::::

## Gráfico pareado (*Pairs plot*)

**psych**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("psych")
library(psych)

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  pairs.panels(pch = 20, 
               ellipses = FALSE, 
               density = FALSE, 
               stars = TRUE, 
               hist.col = "gray",
               digits = 2,
               rug = FALSE,
               breaks = 10,
               ci = TRUE)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# pacote
# install.packages("psych")
library(psych)

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  pairs.panels(pch = 20, 
               ellipses = FALSE, 
               density = FALSE, 
               stars = TRUE, 
               hist.col = "gray",
               digits = 2,
               rug = FALSE,
               breaks = 10,
               ci = TRUE)
```
:::
:::::

# Combinando gráficos

## Descrição {.smaller}

-   Muitas vezes precisamos **combinar gráficos** para representar nossos dados

-   Essa tarefa pode ser realizada depois da criação dos gráficos em aplicativos como [Inkskape](https://inkscape.org/pt-br/) ou [GIMP](https://www.gimp.org/)

-   Outras vezes, podemos usar códigos e pacotes do R para fazer essa tarefa

<center><img src="img/patchwork_graphics.png" style="width:50%"/></center>

::: footer
[patchwork](https://patchwork.data-imaginist.com/)
:::

# 

<center><img src="img/package_graphics.png" style="width:50%"/></center>

::: footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Combinando gráficos

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mfrow = c(1, 2))

boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.2)

plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     main = "Comprimento e profundidade do bico", 
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5, cex.axis = 1.3)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

par(mfrow = c(1, 2))

boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.2)

plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     main = "Comprimento e profundidade do bico", 
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5, cex.axis = 1.3)
```
:::
:::::

## Combinando gráficos

**graphics**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mfrow = c(2, 1))

boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.2)

plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     main = "Comprimento e profundidade do bico", 
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5, cex.axis = 1.3)
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

par(mfrow = c(2, 1))

boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5, cex.lab = 1.3, cex.axis = 1.2)

plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     main = "Comprimento e profundidade do bico", 
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5, cex.axis = 1.3)
```
:::
:::::

# 

<center><img src="img/package_ggplot2.png" style="width:50%"/></center>

::: footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Combinando gráficos

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot_boxplot <- ggplot(data = penguins, 
                         aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
ggplot_boxplot
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot_boxplot <- ggplot(data = penguins, 
                         aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
ggplot_boxplot
```
:::
:::::

## Combinando gráficos

**ggplot2**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot_scatterplot <- ggplot(data = penguins, 
                             aes(x = bill_length_mm, 
                                 y = bill_depth_mm,
                                 color = species,
                                 shape = species)) +
  geom_point(size = 3, alpha = .8) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
ggplot_scatterplot
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot_scatterplot <- ggplot(data = penguins, 
                             aes(x = bill_length_mm, 
                                 y = bill_depth_mm,
                                 color = species,
                                 shape = species)) +
  geom_point(size = 3, alpha = .8) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
ggplot_scatterplot
```
:::
:::::

# 

<center><img src="img/package_cowplot.png" style="width:50%"/></center>

::: footer
[cowplot](https://wilkelab.org/cowplot/)
:::

## Combinando gráficos

**cowplot**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("cowplot")
library(cowplot)

# combinacao horizontal
plot_grid(ggplot_boxplot, ggplot_scatterplot, 
          align = "h", rel_widths = c(1, 1.5),
          labels = "AUTO")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# pacote
# install.packages("cowplot")
library(cowplot)

# combinacao horizontal
plot_grid(ggplot_boxplot, ggplot_scatterplot, 
          align = "h", rel_widths = c(1, 1.5),
          labels = "AUTO")
```
:::
:::::

## Combinando gráficos

**cowplot**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# combinacao vertical
plot_grid(ggplot_boxplot, ggplot_scatterplot, 
          ncol = 1, align = "v", 
          labels = "AUTO")
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# combinacao vertical
plot_grid(ggplot_boxplot, ggplot_scatterplot, 
          ncol = 1, align = "v", 
          labels = "AUTO")
```
:::
:::::

# 

<center><img src="img/package_patchwork.png" style="width:50%"/></center>

::: footer
[patchwork](https://patchwork.data-imaginist.com/)
:::

## Combinando gráficos

**patchwork**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("patchwork")
library(patchwork)

# combinacao horizontal
ggplot_boxplot + ggplot_scatterplot
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# pacote
# install.packages("patchwork")
library(patchwork)

# combinacao horizontal
ggplot_boxplot + ggplot_scatterplot
```
:::
:::::

## Combinando gráficos

**patchwork**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot_boxplot / ggplot_scatterplot
```
:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot_boxplot / ggplot_scatterplot
```
:::
:::::

# Gráficos animados

# 

<center>
<img src="img/package_gganimate.png" style="width:50%"/>
</center>

::: footer
[gganimate](https://gganimate.com/)
:::

## Gráficos animados

**gganimate**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("gganimate")
library(gganimate)

plot_animate <- ggplot(data = penguins,
                       aes(x = bill_length_mm, 
                           y = bill_depth_mm, 
                           color = species)) +
  geom_point() +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies") +
  labs(title = "{closest_state}") +
  transition_states(species) +
  enter_grow() + 
  exit_fade()
plot_animate
```
:::

::: {.column width="50%"}
<br>

<center><img src="img/plot_animate.gif" style="width:100%"/></center>
:::
:::::

## Gráficos animados

**gganimate**

```{r}
#| eval: false
gganimate::anim_save(filename = "plot_animate.gif",
                     animation = plot_animate, wi = 700, he = 500, un = "px")
```

<center><img src="img/plot_animate.gif" style="width:55%"/></center>

# Gráficos interativos

# 

<center>
<img src="img/package_plotly.png" style="width:70%"/>
</center>

::: footer
[plotly](https://plotly.com/r/)
:::

## Gráficos interativos

**plotly**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("plotly")
library(plotly)

plot_ly(data = penguins,
        x = ~bill_length_mm, 
        y = ~bill_depth_mm, 
        type = "scatter",
        color = ~species,
        colors = c("darkorange", "purple", "cyan4")) %>% 
  layout(xaxis = list(title = "Comprimento do bico (mm)"),
         yaxis = list(title = "Profundidade do bico (mm)"))
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

# pacote
# install.packages("plotly")
library(plotly)

plot_ly(data = penguins,
        x = ~bill_length_mm, 
        y = ~bill_depth_mm, 
        type = "scatter",
        color = ~species,
        colors = c("darkorange", "purple", "cyan4")) %>% 
  layout(xaxis = list(title = "Comprimento do bico (mm)"),
         yaxis = list(title = "Profundidade do bico (mm)"))
```
:::
:::::

## Gráficos interativos

**plotly**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
plot_ly(data = penguins,
        x = ~bill_length_mm, 
        y = ~bill_depth_mm, 
        z = ~body_mass_g,
        type = "scatter3d",
        color = ~species,
        colors = c("darkorange", "purple", "cyan4")) %>% 
  layout(scene = list(xaxis = list(title = "Comprimento do bico (mm)"),
                      yaxis = list(title = "Profundidade do bico (mm)"),
                      zaxis = list(title = "Massa (g)")))
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

plot_ly(data = penguins,
        x = ~bill_length_mm, 
        y = ~bill_depth_mm, 
        z = ~body_mass_g,
        type = "scatter3d",
        color = ~species,
        colors = c("darkorange", "purple", "cyan4")) %>% 
  layout(scene = list(xaxis = list(title = "Comprimento do bico (mm)"),
                      yaxis = list(title = "Profundidade do bico (mm)"),
                      zaxis = list(title = "Massa (g)")))
```
:::
:::::

## Gráficos interativos

**plotly**

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
plot_penguins_scatter_int <- ggplotly(
  ggplot(data = penguins, 
         aes(x = bill_length_mm, 
             y = bill_depth_mm,
             color = species,
             shape = species)) +
    geom_point(size = 3, alpha = .8) +
    geom_smooth(method = "lm", se = FALSE) +
    scale_shape_manual(values = c(19, 15, 17)) +
    scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
    theme_bw(base_size = 15) +
    labs(x = "Comprimento do bico (mm)", 
         y = "Profundidade do bico (mm)", 
         color = "Espécies", shape = "Espécies"))
plot_penguins_scatter_int
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

plot_penguins_scatter_int <- ggplotly(
  ggplot(data = penguins, 
         aes(x = bill_length_mm, 
             y = bill_depth_mm,
             color = species,
             shape = species)) +
    geom_point(size = 3, alpha = .8) +
    geom_smooth(method = "lm", se = FALSE) +
    scale_shape_manual(values = c(19, 15, 17)) +
    scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
    theme_bw(base_size = 15) +
    labs(x = "Comprimento do bico (mm)", 
         y = "Profundidade do bico (mm)", 
         color = "Espécies", shape = "Espécies"))
plot_penguins_scatter_int
```
:::
:::::

## Gráficos interativos

**plotly**

```{r}
#| eval: false

# pacote
# install.packages("htmlwidgets")
library(htmlwidgets)

# export
htmlwidgets::saveWidget(widget = plot_penguins_scatter_int, 
                        file = "plot_penguins_scatter_int.html")
```

# Gráficos usando interface

# 

<center><img src="img/package_esquisse.png" style="width:60%"/></center>

::: footer
[esquisse](https://dreamrs.github.io/esquisse/)
:::

## Gráficos usando interface

**esquisse**

::::: columns
::: {.column width="35%"}
::: {style="font-size: 70%;"}
```{r}
#| eval: false
# pacote
# install.packages("esquisse")
library(esquisse)

# iniciar
palmerpenguins::penguins %>% 
  na.omit() %>% 
  esquisse::esquisser()
```
:::
:::

::: {.column width="65%"}
<center>
<img src="img/esquisse.gif" style="width:100%"/>
</center>
:::
:::::

::: footer
[esquisse](https://dreamrs.github.io/esquisse/)
:::

## Gráficos usando interface

**esquisse - Shiny**

<center>
<img src="img/esquisse_shiny_online.png" style="width:100%"/>
</center>

::: footer
[esquisse - shiny](https://dreamrs.shinyapps.io/esquisse/)
:::


# Dúvidas?

## Muito obrigado!

::: columns
::: {.column width="50%"}
**Agradecimentos**:

- [Beatriz Milz](https://beatrizmilz.com/)

![](img/fapesp.png){.absolute width=40% right=650 top=350}
:::

::: {.column width="50%"}
**Contato**:

[mauricio.vancine@gmail.com]()
[mauriciovancine.github.io](https://mauriciovancine.github.io)

![](img/gif_frogs.gif){.absolute width=40% right=90 top=260}
:::
:::

:::footer
Slides por [Maurício Vancine](https://mauriciovancine.github.io), feitos com [Quarto](https://quarto.org/). Código disponível no [GitHub](https://github.com/mauriciovancine/workshop-git-github-rstudio).
:::